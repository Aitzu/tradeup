

<%= form_with(model: job, local: true) do |form| %>
  <% if job.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(job.errors.count, "error") %> prohibited this job from being saved:</h2>

      <ul>
      <% job.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

    <div class="field">
      <%= form.label :job_category, "Job category: *" %><br>
      <% if params[:job] %>
        <%= form.collection_select :job_category_id, JobCategory.all, :id, :category, :required => true, :include_blank => true, :selected => params[:job][:category_id] %>
      <% elsif params[:job_category] %>
        <%= form.collection_select :job_category_id, JobCategory.all, :id, :category, :required => true, :include_blank => true, :selected => params[:job_category] %>
      <% else %>
        <%= form.collection_select :job_category_id, JobCategory.all, :id, :category, :required => true, :include_blank => true %>
      <% end %>
    </div>

  <div class="field">
    <%= form.label :title, "Title: *" %>
    <%= form.text_field :title, :required => true %>
  </div>

  <div class="field">
    <%= form.label :description, "Description: *" %>
    <%= form.text_area :description, :required => true %>
  </div>

  <div class="field">
    <%= form.label :images, "Images (this will assist the tradesman to assess the job prior to attendance): " %>
    <%# <%= form.file_field :images, multiple: true %>
    <div class="drag_and_drop dash-area">
      <%= form.drag_and_drop_file_field :images, multiple: true %>
    </div>
  </div>

  <div class="field">
    <%= form.label :first_tenant_name, "First tenant name: *" %>
    <%= form.text_area :tenant_one_name, :required => true %>
  </div>

  <div class="field">
    <%= form.label :first_tenant_contact_number, "First tenant contact number: *" %>
    <%= form.text_area :tenant_one_contact, :required => true %>
  </div>

  <div class="field">
    <%= form.label :second_tenant_name %>
    <%= form.text_area :tenant_two_name %>
  </div>

  <div class="field">
    <%= form.label :second_tenant_contact_number %>
    <%= form.text_area :tenant_two_contact %>
  </div>

  <div class="field">
    <%= form.label :tenant_available_time, "Tenant's available time: *"%>
    <%= form.datetime_select :tenant_available_time, :required => true %>
  </div>

  <%= form.label :address, "Address of the property: *"%> 
  <div id="locationField">
      <input id="autocomplete" placeholder="Enter peoperty address" type="text" style="width:500px;"></input>
  </div>

  <div class="field">
    <%# <%= form.label :street_number %> 
    <%= form.hidden_field :street_number, id: 'street_number', maxlength: 10 %>
  </div>

  <div class="field">
    <%# <%= form.label :street_name %> 
    <%= form.hidden_field :street_name, id: 'route', :required => true%>
  </div>

  <div class="field">
    <%# <%= form.label :city %>
    <%= form.hidden_field :city, id: 'locality', :required => true%>
  </div>

  <div class="field">
    <%# <%= form.label :postcode %> 
    <%= form.hidden_field :postcode, id: 'postal_code', :required => true, maxlength: 4%>
  </div>

  <div class="field">
    <%# <%= form.label :state %> 
    <%= form.hidden_field :state, id: 'administrative_area_level_1', :required => true %>
  </div>

  <div class="field">
    <%= form.label :price, "Price: *" %>
    <%= form.text_field :price, :required => true, value: number_with_precision((job.price||0)/100.0, :precision => 2) %>
  </div>

  <div class="actions">
    <%= form.submit %>
  </div>
<% end %>


<script>
  // This example displays an address form, using the autocomplete feature
  // of the Google Places API to help users fill in the information.

  // This example requires the Places library. Include the libraries=places
  // parameter when you first load the API. For example:
  // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

  var placeSearch, autocomplete;
  var componentForm = {
    street_number: 'short_name',
    route: 'long_name',
    locality: 'long_name',
    administrative_area_level_1: 'short_name',
    country: 'long_name',
    postal_code: 'short_name'
  };

  function initAutocomplete() {
    // Create the autocomplete object, restricting the search to geographical
    // location types.
    autocomplete = new google.maps.places.Autocomplete(
        /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
        {types: ['geocode'], componentRestrictions: {country: 'aus'}});

    // When the user selects an address from the dropdown, populate the address
    // fields in the form.
    autocomplete.addListener('place_changed', fillInAddress);
  }

  function fillInAddress() {
    // Get the place details from the autocomplete object.
    var place = autocomplete.getPlace();

    for (var component in componentForm) {
      if (document.getElementById(component)) {
        document.getElementById(component).value = '';
        document.getElementById(component).disabled = false;
      }
    }

    // Get each component of the address from the place details
    // and fill the corresponding field on the form.
    for (var i = 0; i < place.address_components.length; i++) {
      var addressType = place.address_components[i].types[0];
      if (document.getElementById(addressType) && componentForm[addressType]) {
        var val = place.address_components[i][componentForm[addressType]];
        document.getElementById(addressType).value = val;
      }
    }
  }

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_API_KEY'] %>&libraries=places&callback=initAutocomplete"
    async defer>
</script>

<style>
  .asdndzone {
    padding: 3em;
    border: 1px dashed grey;
    max-width: 350px;
  }
  </style>